# pages/5_modelado.py
import streamlit as st

st.set_page_config(page_title="Modelado Dimensional", page_icon="‚≠ê", layout="wide")

st.markdown("<h1 style='text-align:center; color:#ffffff;'>‚≠ê Modelado Dimensional</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center; font-size:16px; color:gray;'>Esquema Estrella, Copo de Nieve y t√©cnicas de modelado</p>", unsafe_allow_html=True)

st.divider()

# --- Introducci√≥n ---
st.subheader("üìù ¬øQu√© es el Modelado Dimensional?")
st.write("""
El **modelado dimensional** es una t√©cnica de dise√±o de bases de datos optimizada para consultas y an√°lisis
en Data Warehouses. A diferencia de la normalizaci√≥n tradicional, prioriza la **simplicidad de consultas** 
y el **rendimiento anal√≠tico** sobre la eficiencia de almacenamiento.
""")

st.divider()

# --- Conceptos B√°sicos ---
st.subheader("üéØ Conceptos Fundamentales")

col1, col2 = st.columns(2)

with col1:
    st.info("""
    **üìä Tabla de Hechos (Fact Table)**
    
    Contiene las **m√©tricas cuantitativas** del negocio:
    - Ventas, ingresos, cantidades
    - Eventos o transacciones
    - Medidas num√©ricas agregables
    - Claves for√°neas a dimensiones
    
    **Caracter√≠sticas:**
    - ‚úÖ Muchas filas (millones/billones)
    - ‚úÖ Pocas columnas
    - ‚úÖ Principalmente valores num√©ricos
    - ‚úÖ Actualizaciones frecuentes
    """)

with col2:
    st.success("""
    **üî∑ Tablas de Dimensiones (Dimension Tables)**
    
    Contienen **informaci√≥n descriptiva** del contexto:
    - Qui√©n, qu√©, cu√°ndo, d√≥nde, por qu√©, c√≥mo
    - Atributos textuales
    - Categor√≠as y jerarqu√≠as
    - Datos de referencia
    
    **Caracter√≠sticas:**
    - ‚úÖ Menos filas que hechos
    - ‚úÖ Muchas columnas descriptivas
    - ‚úÖ Principalmente texto
    - ‚úÖ Actualizaciones menos frecuentes
    """)

st.divider()

# --- Esquema Estrella ---
st.subheader("‚≠ê Esquema Estrella (Star Schema)")

col1, col2 = st.columns([2, 1])

with col1:
    st.write("""
    El **esquema estrella** es el modelo dimensional m√°s com√∫n y simple:
    
    **Estructura:**
    - Una tabla de hechos central
    - M√∫ltiples tablas de dimensiones conectadas directamente
    - Las dimensiones NO est√°n normalizadas
    - Forma visual de estrella
    
    **Ventajas:**
    - ‚úÖ Consultas simples y r√°pidas
    - ‚úÖ F√°cil de entender para usuarios
    - ‚úÖ Mejor rendimiento de consultas
    - ‚úÖ Menos JOINs necesarios
    
    **Desventajas:**
    - ‚ö†Ô∏è Redundancia de datos en dimensiones
    - ‚ö†Ô∏è Mayor espacio de almacenamiento
    """)

with col2:
    st.code("""
    Ejemplo Ventas:
    
         Tiempo
           |
    Cliente - VENTAS - Producto
           |
        Tienda
        
    VENTAS (Hechos):
    - fecha_id
    - cliente_id
    - producto_id
    - tienda_id
    - cantidad
    - importe
    """)

st.divider()

# --- Esquema Copo de Nieve ---
st.subheader("‚ùÑÔ∏è Esquema Copo de Nieve (Snowflake Schema)")

col1, col2 = st.columns([2, 1])

with col1:
    st.write("""
    El **esquema copo de nieve** es una variaci√≥n normalizada del esquema estrella:
    
    **Estructura:**
    - Tabla de hechos central
    - Dimensiones normalizadas en m√∫ltiples tablas
    - Jerarqu√≠as expl√≠citas
    - Forma visual de copo de nieve
    
    **Ventajas:**
    - ‚úÖ Menor redundancia de datos
    - ‚úÖ Menos espacio de almacenamiento
    - ‚úÖ Mejor integridad referencial
    - ‚úÖ Mantenimiento m√°s sencillo de jerarqu√≠as
    
    **Desventajas:**
    - ‚ö†Ô∏è Consultas m√°s complejas
    - ‚ö†Ô∏è M√°s JOINs = Menor rendimiento
    - ‚ö†Ô∏è M√°s dif√≠cil de entender
    """)

with col2:
    st.code("""
    Ejemplo Normalizado:
    
    A√±o - Mes - D√≠a
              |
           VENTAS - Categor√≠a
              |         |
          Producto   Subcategor√≠a
    
    M√°s niveles de
    normalizaci√≥n en
    las dimensiones
    """)

st.divider()

# --- Comparativa ---
st.subheader("‚öñÔ∏è Estrella vs Copo de Nieve")

comparison_data = {
    "Caracter√≠stica": ["Complejidad", "Rendimiento", "Espacio", "Mantenimiento", "Comprensi√≥n", "JOINs"],
    "‚≠ê Estrella": ["Simple", "Alto", "M√°s espacio", "F√°cil", "Intuitivo", "Pocos"],
    "‚ùÑÔ∏è Copo Nieve": ["Compleja", "Medio", "Menos espacio", "Complejo", "T√©cnico", "Muchos"]
}

st.table(comparison_data)

st.divider()

# --- Tipos de Tablas de Hechos ---
st.subheader("üìä Tipos de Tablas de Hechos")

tab1, tab2, tab3 = st.tabs(["üìù Transaccionales", "üì∏ Snapshot", "üìà Acumulativas"])

with tab1:
    st.markdown("""
    ### Tablas de Hechos Transaccionales
    
    **Descripci√≥n:** Registran eventos individuales en el momento que ocurren.
    
    **Caracter√≠sticas:**
    - Una fila por transacci√≥n
    - Grano m√°s detallado
    - Crece continuamente
    
    **Ejemplo - Ventas:**
    | fecha_id | producto_id | cliente_id | cantidad | precio |
    |----------|-------------|------------|----------|--------|
    | 20250124 | 101         | 5001       | 2        | 49.99  |
    | 20250124 | 102         | 5002       | 1        | 89.99  |
    
    **Casos de uso:**
    - Ventas por ticket
    - Transacciones bancarias
    - Clicks en website
    """)

with tab2:
    st.markdown("""
    ### Tablas de Hechos Snapshot (Instant√°neas)
    
    **Descripci√≥n:** Capturan el estado en momentos espec√≠ficos del tiempo.
    
    **Caracter√≠sticas:**
    - Una fila por per√≠odo
    - Registro peri√≥dico (diario, mensual)
    - Tama√±o predecible
    
    **Ejemplo - Inventario Diario:**
    | fecha_id | producto_id | almacen_id | stock | valor |
    |----------|-------------|------------|-------|-------|
    | 20250124 | 101         | 1          | 150   | 7500  |
    | 20250125 | 101         | 1          | 145   | 7250  |
    
    **Casos de uso:**
    - Saldo de cuentas bancarias
    - Niveles de inventario
    - Estado de procesos
    """)

with tab3:
    st.markdown("""
    ### Tablas de Hechos Acumulativas
    
    **Descripci√≥n:** Siguen un proceso con m√∫ltiples etapas a lo largo del tiempo.
    
    **Caracter√≠sticas:**
    - Una fila por proceso
    - Se actualiza a medida que progresa
    - M√∫ltiples fechas por fila
    
    **Ejemplo - Procesamiento de Pedidos:**
    | pedido_id | fecha_pedido | fecha_envio | fecha_entrega | d√≠as_env√≠o |
    |-----------|--------------|-------------|---------------|------------|
    | 1001      | 2025-01-20   | 2025-01-22  | 2025-01-24    | 4          |
    
    **Casos de uso:**
    - Pipeline de ventas
    - Procesamiento de pedidos
    - Ciclo de vida de productos
    """)

st.divider()

# --- Granularidad ---
with st.expander("üîç Granularidad de los Hechos"):
    st.write("""
    La **granularidad** define el nivel de detalle de las mediciones en la tabla de hechos.
    
    **Niveles comunes:**
    
    1. **Grano At√≥mico (M√°s detallado):**
       - Una fila por transacci√≥n individual
       - Ejemplo: Cada producto en cada ticket de venta
       - ‚úÖ M√°xima flexibilidad de an√°lisis
       - ‚ö†Ô∏è Mayor volumen de datos
    
    2. **Grano Agregado:**
       - Una fila por grupo o per√≠odo
       - Ejemplo: Ventas totales por d√≠a y producto
       - ‚úÖ Menos espacio
       - ‚ö†Ô∏è Pierde detalle para an√°lisis espec√≠ficos
    
    **Recomendaci√≥n:** 
    Siempre dise√±ar al **grano m√°s at√≥mico posible** y crear agregaciones cuando sea necesario.
    """)

st.divider()

# --- Dimensiones Especiales ---
st.subheader("üé≠ Dimensiones Especiales")

col1, col2 = st.columns(2)

with col1:
    st.warning("""
    **üìÖ Dimensi√≥n Tiempo**
    - La m√°s importante
    - Presente en casi todos los modelos
    - Contiene: fecha, d√≠a semana, mes, trimestre, a√±o
    - Facilita an√°lisis temporales
    - Incluye festivos y per√≠odos fiscales
    """)
    
    st.info("""
    **üî¢ Dimensi√≥n Degenerada**
    - Atributo dimensional sin tabla propia
    - Se almacena en la tabla de hechos
    - Ejemplo: N√∫mero de ticket, ID de pedido
    - √ötil para referencias √∫nicas
    """)

with col2:
    st.success("""
    **‚öôÔ∏è Dimensi√≥n Conformada**
    - Compartida entre m√∫ltiples tablas de hechos
    - Significado consistente en todo el DWH
    - Ejemplo: Dimensi√≥n Cliente usada en Ventas y Soporte
    - Permite an√°lisis cruzado (drill-across)
    """)
    
    st.error("""
    **üëª Dimensi√≥n Junk (Basura)**
    - Agrupa indicadores y flags de baja cardinalidad
    - Evita muchas columnas booleanas en hechos
    - Ejemplo: Tipo env√≠o, m√©todo pago, indicadores varios
    - Reduce tama√±o de tabla de hechos
    """)

st.divider()

# --- Ejemplo Pr√°ctico ---
with st.expander("üí° Ejemplo Completo: Sistema de Ventas Retail"):
    st.markdown("""
    ### Modelo Estrella para Ventas
    
    **Tabla de Hechos - VENTAS:**
    ```sql
    CREATE TABLE fact_ventas (
        fecha_id INT,
        producto_id INT,
        cliente_id INT,
        tienda_id INT,
        promocion_id INT,
        cantidad INT,
        importe_venta DECIMAL(10,2),
        descuento DECIMAL(10,2),
        costo DECIMAL(10,2),
        beneficio DECIMAL(10,2)
    );
    ```
    
    **Dimensiones:**
    
    **dim_tiempo:** fecha, d√≠a_semana, mes, trimestre, a√±o, festivo
    
    **dim_producto:** id, nombre, categor√≠a, marca, precio_base
    
    **dim_cliente:** id, nombre, edad, g√©nero, ciudad, segmento
    
    **dim_tienda:** id, nombre, direcci√≥n, regi√≥n, tama√±o
    
    **dim_promocion:** id, nombre, tipo, descuento_pct
    
    **Consulta de ejemplo:**
    ```sql
    SELECT 
        t.a√±o,
        t.mes,
        p.categoria,
        SUM(v.importe_venta) as ventas_totales,
        SUM(v.cantidad) as unidades_vendidas
    FROM fact_ventas v
    JOIN dim_tiempo t ON v.fecha_id = t.id
    JOIN dim_producto p ON v.producto_id = p.id
    WHERE t.a√±o = 2025
    GROUP BY t.a√±o, t.mes, p.categoria;
    ```
    """)

st.divider()

