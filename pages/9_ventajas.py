# pages/9_ventajas.py
import streamlit as st

st.set_page_config(page_title="Ventajas y Limitaciones", page_icon="‚öñÔ∏è", layout="wide")

st.markdown("<h1 style='text-align:center; color:#1e3d8f;'>‚öñÔ∏è Ventajas y Limitaciones del DWH</h1>", unsafe_allow_html=True)
st.markdown("<p style='text-align:center; font-size:16px; color:gray;'>Fortalezas, debilidades y cu√°ndo usar un Data Warehouse</p>", unsafe_allow_html=True)

st.divider()

# --- Introducci√≥n ---
st.subheader("üìù Evaluaci√≥n equilibrada")
st.write("""
Un **Data Warehouse** no es una soluci√≥n universal. Es importante entender tanto sus **fortalezas** 
como sus **limitaciones** para tomar decisiones arquitect√≥nicas informadas y saber cu√°ndo es (y cu√°ndo no es) 
la herramienta adecuada.
""")

st.divider()

# --- Ventajas ---
st.subheader("‚úÖ Ventajas y Fortalezas")

col1, col2 = st.columns(2)

with col1:
    st.success("""
    ### 1Ô∏è‚É£ Separaci√≥n de An√°lisis y Operaciones
    
    **Beneficio:**
    - Los sistemas OLTP no se sobrecargan
    - An√°lisis complejos sin impactar producci√≥n
    - Diferentes patrones de acceso optimizados
    
    **Ejemplo:**
    Un e-commerce puede ejecutar an√°lisis de 3 a√±os de ventas
    sin ralentizar el checkout de los clientes.
    """)
    
    st.info("""
    ### 2Ô∏è‚É£ Datos Hist√≥ricos y Trazabilidad
    
    **Beneficio:**
    - Mantiene historial completo (SCD)
    - Permite an√°lisis de tendencias
    - Auditor√≠a y compliance
    - Time-travel queries
    
    **Ejemplo:**
    Ver c√≥mo eran los precios hace 2 a√±os para an√°lisis
    de elasticidad de demanda.
    """)
    
    st.warning("""
    ### 3Ô∏è‚É£ Calidad y Consistencia de Datos
    
    **Beneficio:**
    - Datos limpios y validados (ETL)
    - Modelo √∫nico y coherente
    - Dimensiones conformadas
    - "Single source of truth"
    
    **Ejemplo:**
    Todos los departamentos ven las mismas cifras de ventas
    (no hay 5 hojas de Excel diferentes).
    """)

with col2:
    st.success("""
    ### 4Ô∏è‚É£ Rendimiento Optimizado para An√°lisis
    
    **Beneficio:**
    - Dise√±ado espec√≠ficamente para queries anal√≠ticas
    - √çndices, particionamiento, compresi√≥n
    - Modelos dimensionales eficientes
    - Agregaciones pre-calculadas
    
    **Ejemplo:**
    Generar un reporte de ventas por regi√≥n que tomar√≠a
    30 minutos en la BD transaccional, toma 5 segundos en el DWH.
    """)
    
    st.info("""
    ### 5Ô∏è‚É£ Integraci√≥n de M√∫ltiples Fuentes
    
    **Beneficio:**
    - Combina datos de ERP, CRM, web, etc.
    - Vista 360¬∞ del negocio
    - Relaciones entre sistemas no conectados
    - Enriquecimiento de datos
    
    **Ejemplo:**
    Analizar comportamiento de clientes combinando datos
    de ventas (ERP), servicio al cliente (CRM) y navegaci√≥n web (Analytics).
    """)
    
    st.warning("""
    ### 6Ô∏è‚É£ Facilita Business Intelligence
    
    **Beneficio:**
    - Herramientas BI conectan f√°cilmente
    - Modelo dimensional intuitivo
    - Reportes estandarizados
    - Self-service analytics posible
    
    **Ejemplo:**
    Analistas de negocio pueden crear reportes sin
    necesitar escribir SQL complejo.
    """)

st.divider()

# --- Ventajas Adicionales ---
with st.expander("‚ú® Ventajas Adicionales"):
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **7Ô∏è‚É£ Escalabilidad:**
        - Cloud DWH escalan a petabytes
        - Compute y storage independientes
        - Pay-as-you-go
        
        **8Ô∏è‚É£ Seguridad Centralizada:**
        - Control de acceso granular
        - Enmascaramiento de datos sensibles
        - Auditor√≠a de acceso
        
        **9Ô∏è‚É£ Gobierno de Datos:**
        - Metadatos centralizados
        - Linaje de datos
        - Documentaci√≥n unificada
        """)
    
    with col2:
        st.markdown("""
        **üîü Soporte para Decisiones:**
        - KPIs y m√©tricas consistentes
        - Dashboards en tiempo real
        - Alertas autom√°ticas
        
        **1Ô∏è‚É£1Ô∏è‚É£ Reducci√≥n de Complejidad:**
        - Abstrae complejidad de sistemas fuente
        - Modelo simple para analistas
        - Menos duplicaci√≥n de l√≥gica
        """)

st.divider()

# --- Limitaciones ---
st.subheader("‚ùå Limitaciones y Desaf√≠os")

col1, col2 = st.columns(2)

with col1:
    st.error("""
    ### 1Ô∏è‚É£ Complejidad de Implementaci√≥n
    
    **Problema:**
    - Requiere dise√±o cuidadoso
    - ETL complejos de desarrollar
    - Curva de aprendizaje
    - Tiempo hasta valor (6-12 meses t√≠pico)
    
    **Impacto:**
    Proyectos DWH pueden tardar meses/a√±os y fallar
    si no hay experiencia adecuada.
    """)
    
    st.warning("""
    ### 2Ô∏è‚É£ Costos Iniciales Altos
    
    **Problema:**
    - Inversi√≥n en infraestructura (on-premise)
    - Licencias software (Oracle, Informatica)
    - Equipos especializados necesarios
    - Mantenimiento continuo
    
    **Impacto:**
    On-premise: $500K-$5M inicial
    Cloud: M√°s accesible pero puede escalar r√°pido
    """)
    
    st.error("""
    ### 3Ô∏è‚É£ Latencia de Datos
    
    **Problema:**
    - ETL t√≠picamente batch (nocturno)
    - Datos no en tiempo real
    - Puede ser horas/d√≠as desactualizado
    - Dif√≠cil para casos de uso real-time
    
    **Impacto:**
    No sirve para alertas instant√°neas o decisiones
    que requieren datos de los √∫ltimos segundos/minutos.
    """)

with col2:
    st.error("""
    ### 4Ô∏è‚É£ Rigidez del Esquema
    
    **Problema:**
    - Cambios de esquema son costosos
    - Requiere rehacer ETL
    - Modelo dimensional r√≠gido
    - Dif√≠cil para datos no estructurados
    
    **Impacto:**
    Cambios de negocio pueden requerir semanas/meses
    de trabajo para reflejar en DWH.
    """)
    
    st.warning("""
    ### 5Ô∏è‚É£ No Adecuado para Todos los Datos
    
    **Problema:**
    - Optimizado para datos estructurados
    - Mal para JSON, logs, im√°genes, videos
    - Semi-estructurado complicado
    - No es un data lake
    
    **Impacto:**
    Necesitas otras soluciones para datos no tabulares
    (logs, clickstream, IoT sin estructura).
    """)
    
    st.error("""
    ### 6Ô∏è‚É£ Mantenimiento Continuo
    
    **Problema:**
    - ETL fallan y necesitan monitoreo
    - Datos de calidad pobre en origen
    - Performance degradation
    - Actualizaciones de dimensiones (SCD)
    
    **Impacto:**
    Requiere equipo dedicado 24/7 para mantener
    pipelines funcionando.
    """)

st.divider()

# --- Limitaciones Adicionales ---
with st.expander("‚ö†Ô∏è Limitaciones Adicionales"):
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        **7Ô∏è‚É£ Duplicaci√≥n de Datos:**
        - Copia datos desde fuentes
        - Mayor uso de storage
        - Sincronizaci√≥n necesaria
        
        **8Ô∏è‚É£ Curva de Aprendizaje:**
        - Modelado dimensional requiere expertise
        - Kimball vs Inmon
        - SQL avanzado necesario
        
        **9Ô∏è‚É£ Vendor Lock-in:**
        - Dif√≠cil migrar entre plataformas
        - Inversi√≥n en herramientas espec√≠ficas
        - Conocimiento propietario
        """)
    
    with col2:
        st.markdown("""
        **üîü Sobrecarga de Datos:**
        - Puede crecer descontroladamente
        - Datos hist√≥ricos infinitos
        - Costos de storage crecientes
        
        **1Ô∏è‚É£1Ô∏è‚É£ No Transaccional:**
        - No soporta OLTP
        - No replacement de BD operacional
        - Solo lectura (mayormente)
        """)

st.divider()

# --- Cu√°ndo usar DWH ---
st.subheader("ü§î ¬øCu√°ndo usar un Data Warehouse?")

tab1, tab2, tab3 = st.tabs(["‚úÖ Usar DWH", "‚ùå No usar DWH", "üîÄ Alternativas"])

with tab1:
    st.success("""
    ### Situaciones donde un DWH es ideal
    
    **1. An√°lisis Hist√≥rico y Reporting:**
    - Necesitas analizar tendencias en a√±os de datos
    - Reportes ejecutivos peri√≥dicos
    - Comparativas a√±o sobre a√±o
    - Cumplimiento y auditor√≠a
    
    **2. Integraci√≥n de M√∫ltiples Fuentes:**
    - Tienes 5+ sistemas que necesitas correlacionar
    - Necesitas vista √∫nica del cliente/producto
    - Datos de ERP, CRM, web, etc.
    
    **3. Business Intelligence:**
    - Dashboards para ejecutivos
    - Self-service analytics para analistas
    - KPIs estandarizados
    - Reportes regulatorios
    
    **4. Datos Estructurados y Tabulares:**
    - Ventas, inventario, finanzas, HR
    - Esquema relativamente estable
    - Datos num√©ricos y categ√≥ricos
    
    **5. Rendimiento es Cr√≠tico:**
    - Queries complejas sobre TB de datos
    - Usuarios concurrentes (100+)
    - SLAs de rendimiento estrictos
    
    **6. Organizaci√≥n Madura en Datos:**
    - Equipo de datos dedicado
    - Presupuesto para implementaci√≥n
    - Estrategia de datos definida
    """)
    
    st.info("""
    **üí° Ejemplos de casos de uso perfectos:**
    
    - **Retail:** An√°lisis de ventas, inventario, comportamiento cliente
    - **Banca:** An√°lisis de riesgo, detecci√≥n fraude, cumplimiento
    - **Salud:** An√°lisis de pacientes, operaciones cl√≠nicas, costos
    - **Telecomunicaciones:** An√°lisis de uso, churn, network performance
    - **Manufactura:** Supply chain, calidad, eficiencia operacional
    """)

with tab2:
    st.error("""
    ### Situaciones donde un DWH NO es adecuado
    
    **1. Datos en Tiempo Real:**
    - Necesitas latencia < 1 segundo
    - Trading, alertas cr√≠ticas, IoT
    - Sistemas de recomendaci√≥n en tiempo real
    ‚Üí **Usar:** Stream processing (Kafka, Flink)
    
    **2. Datos No Estructurados:**
    - Logs, JSON variado, texto libre
    - Im√°genes, videos, audio
    - Clickstream sin esquema
    ‚Üí **Usar:** Data Lake (S3, ADLS) + Spark
    
    **3. Machine Learning en Desarrollo:**
    - Experimentaci√≥n r√°pida con features
    - Modelos que requieren datos raw
    - Feature engineering iterativo
    ‚Üí **Usar:** Data Lake + notebooks (Databricks)
    
    **4. Startup en Fase Temprana:**
    - Pocos datos (< 100GB)
    - Requisitos cambian semanalmente
    - Presupuesto limitado
    ‚Üí **Usar:** PostgreSQL + Metabase
    
    **5. Transacciones Operacionales:**
    - Necesitas UPDATE/DELETE frecuente
    - ACID transactions
    - Baja latencia de escritura
    ‚Üí **Usar:** Base de datos OLTP
    
    **6. An√°lisis Ad-Hoc Exploratorio:**
    - Data scientists explorando datos raw
    - Esquema no definido
    - Hip√≥tesis cambiantes
    ‚Üí **Usar:** Data Lake + Jupyter
    """)

with tab3:
    st.warning("""
    ### Arquitecturas Alternativas
    
    **1. Data Lake:**
    - Almacena datos raw en formato nativo (Parquet, JSON)
    - M√°s flexible, menos estructura
    - Mejor para big data y ML
    - Ejemplos: AWS S3 + Athena, Azure Data Lake
    
    **2. Data Lakehouse:**
    - Combina flexibilidad de Lake + estructura de WH
    - ACID transactions sobre Data Lake
    - Ejemplos: Databricks (Delta Lake), Apache Iceberg
    
    **3. Operational Data Store (ODS):**
    - Para an√°lisis en tiempo real
    - Datos actuales, no hist√≥ricos
    - Ejemplo: MongoDB, Elasticsearch
    
    **4. OLAP Cubes:**
    - Pre-agregaci√≥n multidimensional
    - Muy r√°pido para queries espec√≠ficas
    - Ejemplos: MS Analysis Services, Oracle OLAP
    
    **5. Virtualization (Sin copiar datos):**
    - Query directamente las fuentes
    - Sin duplicaci√≥n
    - Ejemplos: Denodo, Dremio
    
    **6. PostgreSQL + Extensions:**
    - Para startups/peque√±as empresas
    - Citus (sharding), TimescaleDB (time-series)
    - Mucho m√°s simple que DWH completo
    """)

st.divider()

# --- Matriz de Decisi√≥n ---
st.subheader("üìä Matriz de Decisi√≥n")

st.markdown("""
### Eval√∫a tu situaci√≥n

Responde estas preguntas para decidir si necesitas un DWH:
""")

col1, col2 = st.columns([1, 2])

with col1:
    st.metric("Volumen de datos", "> 1TB", help="¬øM√°s de 1TB de datos?")
    st.metric("Fuentes de datos", "> 5", help="¬øM√°s de 5 sistemas?")
    st.metric("Usuarios analistas", "> 20", help="¬øM√°s de 20 usuarios?")
    st.metric("Presupuesto anual", "> $100K", help="¬øM√°s de $100K disponible?")
    st.metric("Latencia aceptable", "> 1 hora", help="¬øDatos pueden tener m√°s de 1 hora de retraso?")

with col2:
    st.info("""
    **Scoring:**
    
    - **5 S√ç:** DWH es probablemente necesario ‚úÖ
    - **3-4 S√ç:** DWH puede ser beneficioso ‚ö†Ô∏è
    - **0-2 S√ç:** Considera alternativas m√°s simples ‚ùå
    
    **Consideraciones adicionales:**
    
    ‚úÖ **A favor de DWH:**
    - Industria regulada (banca, salud)
    - Necesidad de auditor√≠a hist√≥rica
    - M√∫ltiples departamentos necesitan datos
    - Reporting ejecutivo cr√≠tico
    
    ‚ùå **En contra de DWH:**
    - Startup en growth stage
    - Datos principalmente no estructurados
    - Necesidad de real-time (<1 min)
    - Presupuesto/recursos limitados
    """)

st.divider()

# --- Evoluci√≥n ---
st.subheader("üöÄ El Camino Evolutivo")

st.markdown("""
### Evoluci√≥n t√≠pica de arquitectura de datos

Muchas organizaciones siguen este camino:
""")

st.code("""
Fase 1: OLTP solo
    ‚Üì (Crece a 50GB, 10 usuarios)
    
Fase 2: OLTP + Reporting DB (r√©plica)
    ‚Üì (Crece a 500GB, 50 usuarios)
    
Fase 3: OLTP + Data Warehouse simple
    ‚Üì (Crece a 5TB, 200 usuarios, m√∫ltiples fuentes)
    
Fase 4: OLTP + Enterprise DWH + Data Marts
    ‚Üì (Crece a 50TB, 1000 usuarios, ML use cases)
    
Fase 5: OLTP + Data Lake + DWH + Lakehouse
    (Arquitectura h√≠brida moderna)
""")

st.success("""
**üí° Consejo:** No construyas un Enterprise DWH si todav√≠a est√°s en Fase 1-2.  
Evoluciona gradualmente seg√∫n necesidades reales.
""")

st.divider()

# --- Costos ---
with st.expander("üí∞ An√°lisis de Costos - DWH vs Alternativas"):
    st.markdown("""
    ### Comparativa de costos aproximados (empresa mediana)
    
    | Soluci√≥n | Setup Inicial | Costo Anual | Complejidad | Time-to-Value |
    |----------|---------------|-------------|-------------|---------------|
    | PostgreSQL + Metabase | $0-5K | $10-20K | Baja | 1-2 meses |
    | Cloud DWH (BigQuery/Snowflake) | $5-20K | $50-200K | Media | 3-6 meses |
    | Enterprise DWH (on-premise) | $500K-2M | $200-500K | Alta | 12-24 meses |
    | Data Lake + Spark | $10-50K | $100-300K | Alta | 6-12 meses |
    | Lakehouse (Databricks) | $20-50K | $150-400K | Media-Alta | 4-9 meses |
    
    **Factores de costo:**
    - Storage: $10-50 por TB/mes
    - Compute: $0.10-5 por hora de query
    - Licencias: $0-$100K+ (Informatica, Tableau)
    - Personal: $150-250K por ingeniero de datos
    - Mantenimiento: 15-25% de costo inicial anual
    """)

st.divider()

# --- Conclusi√≥n ---
st.subheader("üéØ Conclusi√≥n")

col1, col2 = st.columns(2)

with col1:
    st.success("""
    ### Un DWH es valioso cuando...
    
    ‚úÖ Tienes m√∫ltiples fuentes de datos estructurados
    
    ‚úÖ Necesitas an√°lisis hist√≥rico y reporting
    
    ‚úÖ Rendimiento de queries anal√≠ticas es cr√≠tico
    
    ‚úÖ Tienes usuarios de negocio que necesitan self-service BI
    
    ‚úÖ Tu organizaci√≥n es madura en datos y tiene presupuesto
    
    **‚Üí En estos casos, la inversi√≥n vale la pena**
    """)

with col2:
    st.error("""
    ### Un DWH puede ser excesivo cuando...
    
    ‚ùå Eres una startup peque√±a con pocos datos
    
    ‚ùå Necesitas an√°lisis en tiempo real (< 1 min)
    
    ‚ùå Tus datos son principalmente no estructurados
    
    ‚ùå Tu esquema cambia constantemente
    
    ‚ùå No tienes equipo dedicado de datos
    
    **‚Üí Considera alternativas m√°s √°giles primero**
    """)

st.info("""
**üí° Recomendaci√≥n Final:**

Un Data Warehouse no es obsoleto, pero tampoco es la √∫nica soluci√≥n.  
Eval√∫a tus necesidades, recursos y madurez organizacional antes de decidir.  
Muchas veces, un **enfoque h√≠brido** (Lake + Warehouse + Streaming) es la mejor opci√≥n.
""")

st.divider()

